console.log('#9. JavaScript homework example file')

/*
 * #1
 *
 * Задача: Відстежування кліку на кнопку та виведення повідомлення
 * Мета: Розробити функцію, яка призначає обробник події кліку на кнопку з певним ID і виводить у консоль заздалегідь визначене повідомлення при кожному кліку на кнопку.
 *
 * Вимоги:
 * 1. Функція має приймати два параметри:
 *    - buttonId (рядок) - ID кнопки, на яку потрібно встановити обробник події.
 *    - message (рядок) - повідомлення, яке буде виводитись у консоль при кліку на кнопку.
 * 2. Функція має знайти кнопку за допомогою buttonId і призначити їй обробник події кліку.
 * 3. При кліку на кнопку у консоль має виводитись задане message.
 * 4. Функція має бути експортована для подальшого використання і тестування.
 *
 */

function handleButtonClick(buttonId, message) {
    // Знаходимо кнопку за допомогою переданого ID
    const button = document.getElementById(buttonId);
    
    // Перевірка, чи знайдена кнопка
    if (button) {
      // Призначаємо обробник події кліку на кнопку
      button.addEventListener('click', function() {
        // Виводимо задане повідомлення у консоль при кожному кліку
        console.log(message);
      });
    } else {
      console.log(`Кнопка з ID "${buttonId}" не знайдена.`);
    }
  }
  
  // Демонстрація використання функції (припустимо, що HTML містить кнопку з ID 'myButton')
  // handleButtonClick('myButton', 'Button clicked!');
  
// Знаходження кнопки: Функція використовує document.getElementById(buttonId) для того, щоб знайти кнопку за переданим ID.
//Перевірка наявності кнопки: Якщо кнопка знайдена (не є null), призначається обробник події click, який виводить у консоль передане повідомлення.
// Обробник події: За допомогою addEventListener додається обробник події для кліку на кнопку.
// Експортування: експортувати функцію для використання в інших модулях: export { handleButtonClick };
 


/*
 * #2
 *
 * Задача: Розробка функції відстеження позиції курсору миші
 * Мета: Створити функцію trackMousePosition, яка встановлює обробник події для відстеження руху миші по документу та виводить в консоль координати курсору миші (X та Y).
 *
 * Вимоги до реалізації:
 * 1. Функціональність: Функція має відслідковувати рух миші по документу. При кожному русі миші функція має виводити в консоль координати clientX та clientY, які представляють позицію курсору відносно вікна переглядача.
 * 2. Реєстрація обробника події: Функція має використовувати document.addEventListener для реєстрації обробника події mousemove.
 * 3. Вивід даних: При спрацьовуванні події mousemove, функція має виводити рядок у форматі `"Mouse X: [X], Mouse Y: [Y]"`, де `[X]` та `[Y]` - це відповідні координати курсору миші.
 *
 */

function trackMousePosition() {
  // Додаємо обробник події для відстеження руху миші
  document.addEventListener('mousemove', function(event) {
    // Отримуємо координати курсору відносно вікна переглядача
    const x = event.clientX;
    const y = event.clientY;
    
    // Виводимо координати у консоль у потрібному форматі
    console.log(`Mouse X: ${x}, Mouse Y: ${y}`);
  });
}

// Викликаємо функцію для початку відстеження
trackMousePosition();


// console.log(trackMousePosition())


// document.addEventListener('mousemove', callback) — цей код додає обробник події на весь документ, щоб відслідковувати рух миші. Кожного разу, коли миша рухається, викликається функція callback.
// event.clientX та event.clientY — ці властивості події mousemove містять координати курсору миші відносно верхнього лівого кута вікна переглядача. Це значення буде змінюватися залежно від того, де знаходиться курсор на екрані.
// console.log() — використовується для виведення координат у консоль. Формат виведення відповідає вимогам: "Mouse X: [X], Mouse Y: [Y]".
// Коли  викликаємо функцію trackMousePosition(), вона реєструє обробник події на всьому документі.
// Кожного разу, коли миша рухається, на консоль виводяться поточні координати курсору в форматі Mouse X: [X], Mouse Y: [Y].
// Ця функція працюватиме протягом всієї сесії на веб-сторінці, поки вона не буде перервана або сторінка не буде перезавантажена.



/*
 * #3
 *
 * Задача: Реалізація делегування подій для відстеження кліків на елементах списку
 * Мета: Створити функцію setupEventDelegation, яка дозволить встановити обробник подій на весь список, замість окремих елементів `<li>`. Функція повинна відстежувати кліки на елементах <li> у межах заданого списку і логувати текст "Item clicked: [Текст Елемента]", де "[Текст Елемента]" - це текст клікнутого елемента `<li>`, в консоль.
 *
 * Вимоги до реалізації:
 * 1. Вибір елемента списку: Функція повинна приймати селектор CSS як аргумент, що вказує на елемент списку `<ul>` або `<ol>`, до якого буде застосовано делегування подій.
 * 2. Встановлення обробника подій: Використовуючи метод addEventListener, функція має додати обробник для події `click` на весь список. Обробник повинен спрацьовувати при кліку на будь-який з елементів `<li>` у цьому списку.
 * 3. Логування кліків: Коли елемент <li> клікнуто, функція має вивести у консоль повідомлення у форматі "Item clicked: [Текст Елемента]", де "[Текст Елемента]" має бути текстом клікнутого елемента <li>. Текст елемента має бути обрізаним trim(), щоб видалити зайві пробіли на початку та в кінці.
 *
 */

// function createTestList() {
//   document.body.innerHTML = `
//     <ul id="testList">
//       <li>Item 1</li>
//       <li>Item 2</li>
//       <li>Item 3</li>
//     </ul>
//     `
// }
// createTestList()

function setupEventDelegation(selector) {
  // Знаходимо елемент списку за допомогою селектора
  const list = document.querySelector(selector);
  
  // Перевіряємо, чи знайдено список
  if (!list) {
    console.error('Список не знайдено!');
    return;
  }

  // Додаємо обробник події на весь список
  list.addEventListener('click', function(event) {
    // Перевіряємо, чи було клікнуто саме на елемент <li>
    if (event.target && event.target.tagName === 'LI') {
      // Отримуємо текст елемента <li> та обрізаємо зайві пробіли
      const text = event.target.textContent.trim();
      console.log(`Item clicked: ${text}`);
    }
  });
}

// Використання функції для тестування
// Припустимо, що в HTML є список з id="testList"
/* setupEventDelegation('#testList'); */

// Експорт функції для використання та тестування
export { setupEventDelegation };


// setupEventDelegation('#testList')




// document.querySelector(selector) — використовується для вибору батьківського елемента списку (<ul> або <ol>) за допомогою переданого селектора.
// list.addEventListener('click', callback) — додаємо обробник події для події click на весь список. Обробник буде спрацьовувати при кліку на будь-який елемент у списку, включаючи <li>.
// event.target — вказує на елемент, на якому було здійснено клік. Ми перевіряємо, чи є цей елемент елементом <li>.
// event.target.textContent.trim() — отримуємо текстовий вміст елемента, обрізаємо зайві пробіли за допомогою trim().
// console.log() — виводимо текст елемента у форматі "Item clicked: [Текст Елемента]".

// Коли ви викликаєте функцію setupEventDelegation('#testList'), вона встановлює обробник події на список з ідентифікатором testList.
// Кожного разу, коли ви клікаєте на елемент <li>, функція перевіряє, чи був клік саме на <li>, і виводить його текст у консоль.
// Ця техніка делегування подій дозволяє ефективно обробляти події на елементах, що можуть бути додані динамічно після завантаження сторінки.
